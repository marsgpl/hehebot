<table border class="DataTable">
    <tr>
        <th colspan="2">Metrics</th>
    </tr>
    <% for (const key in metrics) {
        const value = metrics[key];
    %>
        <tr>
            <td class="Key"><%= key %></td>
            <td>
                <%= (typeof value !== 'string' ? JSON.stringify(value) : value) %>
            </td>
        </tr>
    <% } %>
</table>

<table border class="DataTable">
    <tr>
        <th colspan="2">Debug</th>
    </tr>
    <% for (const key in debug) {
        const value = debug[key];
    %>
        <tr>
            <td class="Key"><%= key %></td>
            <td>
                <%= (typeof value !== 'string' ? JSON.stringify(value) : value) %>
            </td>
        </tr>
    <% } %>
</table>

<div class="NextTask" data-countdown="<%= nextTask.countdown %>">
    <%= nextTask.name %> in <span><%= nextTask.countdown %></span>s (from: <%= nextTask.reason %>)
</div>

<button class="RefreshButton" onclick="location.reload()">refresh</button>

<style>
    body {
        margin: 0;
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen,
            Ubuntu, Cantarell, 'Fira Sans', 'Droid Sans', 'Helvetica Neue', sans-serif;
        -webkit-font-smoothing: antialiased;
        -moz-osx-font-smoothing: grayscale;
        font-size: 16px;
    }
    .DataTable {
        width: 100%;
        border-collapse: collapse;
        border: 1px solid #ddd;
    }
    .DataTable + .DataTable {
        margin-top: 50px;
    }
    .DataTable th {
        user-select: none;
        background: #f4f4f4;
    }
    .DataTable th, td {
        padding: 15px;
        word-break: break-word;
        text-align: left;
    }
    .DataTable .Key {
        width: 140px;
    }
    .RefreshButton {
        display: none;
        position: fixed;
        top: 14px;
        right: 14px;
    }
    .NextTask {
        display: none;
        position: fixed;
        top: 0;
        right: 0;
        padding: 16px;
        color: #666;
        font-size: 14px;
    }
</style>

<script>
    window.addEventListener('DOMContentLoaded', (event) => {
        const RefreshButton = document.querySelector('.RefreshButton');
        const NextTask = document.querySelector('.NextTask');
        const NextTaskCountdown = NextTask.querySelector('span');
        const countdown = Number(NextTask.dataset.countdown);
        const nextTaskTs = Date.now() + countdown * 1000;

        const updateNextTask = () => {
            const nowTs = Date.now();
            const secondsLeft = Math.round((nextTaskTs - nowTs) / 1000);

            if (secondsLeft < 1) {
                NextTask.style.display = 'none';
                RefreshButton.style.display = 'block';
                clearInterval(updateNextTaskInterval);
            } else {
                NextTask.style.display = 'block';
                RefreshButton.style.display = 'none';
                NextTaskCountdown.innerText = secondsLeft;
            }
        }

        const updateNextTaskInterval = setInterval(updateNextTask, 1000);
        updateNextTask();
    });
</script>
